package com.github.moribund.net.packets.account;

import com.esotericsoftware.kryonet.Connection;
import com.github.moribund.MoribundServer;
import com.github.moribund.entity.PlayableCharacter;
import com.github.moribund.entity.Player;
import com.github.moribund.net.packets.IncomingPacket;
import javafx.util.Pair;
import lombok.val;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

/**
 * The request sent by the client to the server that a person is making
 * an account, so it must register that request and follow instructions
 * to handle the player server-sided.
 */
public class LoginRequestPacket implements IncomingPacket {
    /**
     * A private constructor to ensure the server cannot unexpectedly send this
     * request to the client.
     */
    private LoginRequestPacket() { }

    @Override
    public void process(Connection connection) {
        val playerId = connection.getID();
        val player = createNewPlayer(playerId, connection);

        sendNewPlayerPacket(player);

        val playersMap = MoribundServer.getInstance().getPlayers();
        playersMap.putIfAbsent(playerId, player);

        sendPlayersToNewPlayer(player);
    }


    /**
     * Sends the {@link LoginPacket} to the newly made player. An important thing
     * to note is that this sends a list of players that includes the newly made player
     * him/her self.
     * @param player The newly made {@link Player}.
     */
    private void sendPlayersToNewPlayer(PlayableCharacter player) {
        // note this includes the newly made player
        val playersMap = MoribundServer.getInstance().getPlayers();
        List<Pair<Integer, Pair<Float, Float>>> playerTiles = new ArrayList<>();
        List<Pair<Integer, Float>> playerRotations = new ArrayList<>();
        playersMap.forEach((playerId, aPlayer) -> {
            playerTiles.add(new Pair<>(playerId, new Pair<>(aPlayer.getX(), aPlayer.getY())));
            playerRotations.add(new Pair<>(playerId, aPlayer.getRotation()));
        });

        val loginPacket = new LoginPacket(player.getPlayerId(), playerTiles, playerRotations);
        player.getConnection().sendUDP(loginPacket);
    }

    /**
     * Sends a {@link DrawNewPlayerPacket} to all the existing {@link Player}s in the game.
     * @param newPlayer The newly made {@link Player}.
     */
    private void sendNewPlayerPacket(PlayableCharacter newPlayer) {
        val playersMap = MoribundServer.getInstance().getPlayers();
        val newPlayerLoginPacket = new DrawNewPlayerPacket(newPlayer.getPlayerId(), newPlayer.getX(), newPlayer.getY(), newPlayer.getRotation());
        playersMap.forEach((playerId, player) -> player.getConnection().sendUDP(newPlayerLoginPacket));
    }

    /**
     * Makes a new {@link Player} using the player ID that is generated by the
     * {@link Connection} and the {@link Connection} itself.
     * @param playerId The player ID of the newly made player.
     * @param connection The connection of the newly made player.
     * @return The newly made {@link Player}.
     */
    private Player createNewPlayer(int playerId, Connection connection) {
        val player = new Player(playerId, ThreadLocalRandom.current().nextInt(0, 100),
                ThreadLocalRandom.current().nextInt(0, 100));
        player.setConnection(connection);
        return player;
    }
}
